{% if template contains 'product' %}
  <div id="sticky-add-to-cart" class="sticky-add-to-cart hidden">
    <div class="sticky-inner">
      <div class="product-thumbnail">
        <img src="{{ product.featured_image | image_url: width: 80 }}" alt="{{ product.title }}">
      </div>
      <div class="product-info">
        <div class="product-title">{{ product.title }}</div>
        <div class="product-price">
          {{ product.price | money }}
        </div>
      </div>
      <div class="sticky-actions">
        <div class="quantity-wrapper">
          <button class="qty-btn" onclick="decreaseQty()">-</button>
          <input id="sticky-qty" type="number" value="1" min="1">
          <button class="qty-btn" onclick="increaseQty()">+</button>
        </div>
        <button class="add-to-cart-btn" onclick="stickyAddToCart()">
          <svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 512 512">
            <path fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M80 176a16 16 0 0 0-16 16v216c0 30.24 25.76 56 56 56h272c30.24 0 56-24.51 56-54.75V192a16 16 0 0 0-16-16Zm80 0v-32a96 96 0 0 1 96-96h0a96 96 0 0 1 96 96v32"/>
          </svg>
        </button>
      </div>
    </div>
  </div>
{% endif %}

<style>
    .sticky-add-to-cart {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background: #fff;
    box-shadow: 0 5px 25px rgba(0,0,0,0.15);
    padding: 15px 30px;
    width: calc(100% - 40px);
    max-width: 1400px;
    height: 116px;
    display: flex;
    align-items: center;
    justify-content: space-between;
    border-radius: 12px;
    z-index: 1000;
    transition: opacity 0.3s ease, visibility 0.3s ease;
  }

  .sticky-add-to-cart.hidden {
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
  }

  .sticky-inner {
    display: flex;
    align-items: center;
    width: 100%;
    gap: 20px;
  }

  .product-thumbnail img {
    width: 60px;
    height: auto;
    border-radius: 6px;
  }

  .product-info {
    flex-grow: 1;
  }

  .product-title {
    font-weight: 500;
    font-size: 14px;
  }

  .product-price {
    font-size: 13px;
    color: #666;
  }

  .sticky-actions {
    display: flex;
    align-items: center;
    gap: 10px;
  }

  .quantity-wrapper {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 6px;
    overflow: hidden;
  }

  .qty-btn {
    background: none;
    border: none;
    width: 30px;
    height: 30px;
    font-size: 18px;
    cursor: pointer;
  }

  #sticky-qty {
    width: 40px;
    text-align: center;
    border: none;
    font-size: 14px;
  }

  .add-to-cart-btn {
    background: black;
    color: white;
    border: none;
    padding: 0 16px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 6px;
    cursor: pointer;
  }

  #sticky-qty::-webkit-outer-spin-button,
  #sticky-qty::-webkit-inner-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  #sticky-qty {
    -moz-appearance: textfield; /* Firefox */
  }
</style>

{% comment %}
  Updated script for sections/sticky-cart.liquid
  This script now adds the product to cart via AJAX, updates the header cart count,
  and triggers the theme's native cart drawer to open.
{% endcomment %}

<!--
  <script>
    // Function to get the current variant ID. This assumes your product page has a form or element
    // that holds the selected variant ID, similar to a standard Shopify product form.
    function getSelectedVariantId() {
      const mainProductForm = document.querySelector('form[action*="/cart/add"]');
      if (mainProductForm) {
        const variantInput = mainProductForm.querySelector('[name="id"]');
        if (variantInput) {
          return variantInput.value;
        }
        const variantSelect = mainProductForm.querySelector('select[name="id"]');
        if (variantSelect) {
            return variantSelect.value;
        }
      }
      // Fallback: Use product.selected_or_first_available_variant.id from Liquid.
      // This is less reliable if the user changes variants on the page without refreshing.
      return {{ product.selected_or_first_available_variant.id | json }};
    }

    function toggleStickyBar() {
      const mainAddToCartButton = document.querySelector('form[action*="/cart/add"] button[name="add"]');
      const stickyBar = document.getElementById('sticky-add-to-cart');

      if (!mainAddToCartButton || !stickyBar) return;

      const mainButtonRect = mainAddToCartButton.getBoundingClientRect();
      const isMainButtonVisible = (mainButtonRect.top >= 0 && mainButtonRect.bottom <= window.innerHeight);

      if (!isMainButtonVisible) {
        stickyBar.classList.remove('hidden');
      } else {
        stickyBar.classList.add('hidden');
      }
    }

    function increaseQty() {
      const qtyInput = document.getElementById('sticky-qty');
      qtyInput.value = parseInt(qtyInput.value) + 1;
    }

    function decreaseQty() {
      const qtyInput = document.getElementById('sticky-qty');
      if (parseInt(qtyInput.value) > 1) {
        qtyInput.value = parseInt(qtyInput.value) - 1;
      }
    }

    function stickyAddToCart() {
      const qty = parseInt(document.getElementById('sticky-qty').value);
      const variantId = getSelectedVariantId();

      if (!variantId) {
          console.error('Sticky Cart: No variant ID found to add to cart.');
          alert('Could not add item to cart: Please select a variant if applicable.');
          return;
      }

      const addToCartButton = document.querySelector('.sticky-add-to-cart .add-to-cart-btn');
      if (addToCartButton) {
        addToCartButton.disabled = true;
        addToCartButton.innerHTML = '<svg style="animation: spin 1s linear infinite;" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>'; // Spinner
      }

      fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: variantId,
          quantity: qty,
          sections: ['cart-drawer'], // Request cart-drawer section for themes that use it
          sections_url: window.location.pathname // Important for section rendering
        })
      })
      .then(response => response.json())
      .then(data => {
        if (data.status === 422 || data.errors) {
            console.error('Sticky Cart Error:', data.description || data.errors);
            alert('Could not add item to cart: ' + (data.description || 'Unknown error.'));
        } else {
            // --- BEGIN: Horizon theme specific cart update & drawer opening ---

            // 1. Update the header cart count
            const cartCountElement = document.querySelector('.cart-count__text[data-cart-count-text]');
            if (cartCountElement) {
                cartCountElement.textContent = data.item_count || data.cart.item_count;
                // Also update the hidden aria-hidden attribute for accessibility
                document.querySelector('.cart-bubble__text[data-cart-bubble-text]').textContent = `${data.item_count || data.cart.item_count} items in cart`;
            }

            // 2. Open the cart drawer
            const cartDrawerComponent = document.querySelector('cart-drawer-component.cart-drawer');
            if (cartDrawerComponent) {
                // The component itself might have a method or we can click its internal button
                const cartDrawerButton = cartDrawerComponent.querySelector('button[aria-label*="Total items in cart"]');
                if (cartDrawerButton) {
                    cartDrawerButton.click(); // Simulate click on the actual cart button
                }
            }

            // Optional: Trigger a generic event if the theme listens for it (good for other scripts)
            document.dispatchEvent(new CustomEvent('cart:add', {
                bubbles: true,
                detail: {
                    cart: data.cart || data,
                    item: data.items ? data.items[0] : null
                }
            }));

            // Optional: If Horizon theme uses a specific method to refresh sections after AJAX add
            // document.dispatchEvent(new CustomEvent('sections:load', { detail: { sectionId: 'cart-drawer' } }));
        }
      })
      .catch(error => {
        console.error('Error adding to cart:', error);
        alert('There was an error adding the item to your cart. Please try again.');
      })
      .finally(() => {
          if (addToCartButton) {
              addToCartButton.disabled = false;
              addToCartButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 512 512"><path fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M80 176a16 16 0 0 0-16 16v216c0 30.24 25.76 56 56 56h272c30.24 0 56-24.51 56-54.75V192a16 16 0 0 0-16-16Zm80 0v-32a96 96 0 0 1 96-96h0a96 96 0 0 1 96 96v32"/></svg>';
          }
      });
    }

    window.addEventListener('scroll', toggleStickyBar);
    document.addEventListener('DOMContentLoaded', toggleStickyBar);

    const mainProductForm = document.querySelector('form[action*="/cart/add"]');
    if (mainProductForm) {
        new MutationObserver(toggleStickyBar).observe(mainProductForm, { attributes: true, childList: true, subtree: true });
    }

    // Add this to your global CSS or in the <style> tag of this section
    // @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
  </script>
-->

{% comment %}
  Updated script for sections/sticky-cart.liquid
  This script now adds the product to cart via AJAX, updates the header cart count,
  and **explicitly triggers the theme's cart drawer component to update its content**
  before opening it.
{% endcomment %}

<script>
  // Function to get the current variant ID.
  function getSelectedVariantId() {
    const mainProductForm = document.querySelector('form[action*="/cart/add"]');
    if (mainProductForm) {
      const variantInput = mainProductForm.querySelector('[name="id"]');
      if (variantInput && variantInput.value) { // Ensure value exists
        return variantInput.value;
      }
      const variantSelect = mainProductForm.querySelector('select[name="id"]');
      if (variantSelect && variantSelect.value) { // Ensure value exists
          return variantSelect.value;
      }
    }
    // Fallback if no specific input/select is found (less robust for dynamic variant changes)
    return {{ product.selected_or_first_available_variant.id | json }};
  }

  function toggleStickyBar() {
    const mainAddToCartButton = document.querySelector('form[action*="/cart/add"] button[name="add"]');
    const stickyBar = document.getElementById('sticky-add-to-cart');

    if (!mainAddToCartButton || !stickyBar) return;

    const mainButtonRect = mainAddToCartButton.getBoundingClientRect();
    const isMainButtonVisible = (mainButtonRect.top >= 0 && mainButtonRect.bottom <= window.innerHeight);

    if (!isMainButtonVisible) {
      stickyBar.classList.remove('hidden');
    } else {
      stickyBar.classList.add('hidden');
    }
  }

  function increaseQty() {
    const qtyInput = document.getElementById('sticky-qty');
    qtyInput.value = parseInt(qtyInput.value) + 1;
  }

  function decreaseQty() {
    const qtyInput = document.getElementById('sticky-qty');
    if (parseInt(qtyInput.value) > 1) {
      qtyInput.value = parseInt(qtyInput.value) - 1;
    }
  }

  async function stickyAddToCart() { // Made async to handle fetch await
    const qty = parseInt(document.getElementById('sticky-qty').value);
    const variantId = getSelectedVariantId();

    if (!variantId) {
        console.error('Sticky Cart: No variant ID found to add to cart.');
        alert('Could not add item to cart: Please select a variant if applicable.');
        return;
    }

    const addToCartButton = document.querySelector('.sticky-add-to-cart .add-to-cart-btn');
    if (addToCartButton) {
      addToCartButton.disabled = true;
      // Use SVG for spinner (ensure @keyframes spin is in your CSS)
      addToCartButton.innerHTML = '<svg style="animation: spin 1s linear infinite;" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M21 12a9 9 0 1 1-6.219-8.56"></path></svg>';
    }

    try {
      const response = await fetch('/cart/add.js', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({
          id: variantId,
          quantity: qty,
          sections: ['cart-drawer', 'header'], // Request cart-drawer and header sections
          sections_url: window.location.pathname
        })
      });

      const data = await response.json();

      if (!response.ok || data.status === 422 || data.errors) {
          console.error('Sticky Cart Error:', data.description || data.errors || response.statusText);
          alert('Could not add item to cart: ' + (data.description || 'Unknown error.'));
          return;
      }

      // --- BEGIN: Horizon theme specific cart update & drawer opening ---

      // 1. Update the header cart count and bubble (even if we force component update later, this is quick feedback)
      const cartCountElement = document.querySelector('.cart-count__text[data-cart-count-text]');
      if (cartCountElement) {
          const newCount = data.item_count || data.cart.item_count;
          cartCountElement.textContent = newCount;
          const cartBubbleText = document.querySelector('.cart-bubble__text[data-cart-bubble-text]');
          if (cartBubbleText) {
              cartBubbleText.textContent = `${newCount} items in cart`; // Update the a11y text
          }
          // Also check for a visual class toggle on the bubble if count goes from 0 to >0
          const cartBubbleBackground = document.querySelector('.cart-bubble_background');
          if (cartBubbleBackground) {
            if (newCount > 0) {
              cartBubbleBackground.classList.remove('hidden'); // Or specific class that makes it visible
            } else {
              cartBubbleBackground.classList.add('hidden'); // Or specific class that hides it
            }
          }
      }

      // 2. Refresh the cart drawer content and open it
      const cartDrawerComponent = document.querySelector('cart-drawer-component.cart-drawer');
      if (cartDrawerComponent) {
          // If the component has an 'update' method (common for custom elements)
          if (typeof cartDrawerComponent.update === 'function') {
              // This is the ideal way: tell the component to refresh itself.
              // It might accept the new cart data directly, or just trigger an internal re-fetch.
              cartDrawerComponent.update(data); // Pass the updated cart data
          } else {
              // Fallback: If no direct update method, dispatch a generic event.
              // Horizon's 'cart-drawer-component' likely listens for `cart:item-added` or similar.
              // We'll try a common one here.
              document.dispatchEvent(new CustomEvent('cart:item-added', {
                  bubbles: true,
                  detail: {
                      cart: data.cart || data,
                      item: data.items ? data.items[0] : null // The item that was just added
                  }
              }));
              // Also dispatch a general cart update event
              document.dispatchEvent(new CustomEvent('cart:update', {
                bubbles: true,
                detail: {
                  cart: data.cart || data
                }
              }));
          }

          // Now, open the drawer. Simulating a click is still the most reliable way.
          const cartDrawerButton = cartDrawerComponent.querySelector('button[aria-label*="Total items in cart"]');
          if (cartDrawerButton && !cartDrawerButton.hasAttribute('aria-expanded')) { // Only click if not already expanded
              cartDrawerButton.click();
          }
      }

      // Optional: Dispatch a global cart change event if other parts of the theme listen to it
      document.dispatchEvent(new CustomEvent('shopify:cart:change', { bubbles: true }));

    } catch (error) {
      console.error('Error adding to cart:', error);
      alert('There was an error adding the item to your cart. Please try again.');
    } finally {
        if (addToCartButton) {
            addToCartButton.disabled = false;
            addToCartButton.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="20px" height="20px" viewBox="0 0 512 512"><path fill="none" stroke="#fff" stroke-linecap="round" stroke-linejoin="round" stroke-width="32" d="M80 176a16 16 0 0 0-16 16v216c0 30.24 25.76 56 56 56h272c30.24 0 56-24.51 56-54.75V192a16 16 0 0 0-16-16Zm80 0v-32a96 96 0 0 1 96-96h0a96 96 0 0 1 96 96v32"/></svg>';
        }
    }
  }

  // Initial setup and event listeners
  window.addEventListener('scroll', toggleStickyBar);
  document.addEventListener('DOMContentLoaded', () => {
    toggleStickyBar();
    // Also ensure the header cart count reflects the initial state on load
    updateHeaderCartCountOnInit();
  });

  // Observe changes on the main product form to re-evaluate sticky bar visibility
  const mainProductForm = document.querySelector('form[action*="/cart/add"]');
  if (mainProductForm) {
      new MutationObserver(toggleStickyBar).observe(mainProductForm, { attributes: true, childList: true, subtree: true });
  }

  // Function to get initial cart count on page load
  async function updateHeaderCartCountOnInit() {
    try {
      const response = await fetch('/cart.js'); // Fetch current cart state
      const cartData = await response.json();
      if (response.ok) {
        const cartCountElement = document.querySelector('.cart-count__text[data-cart-count-text]');
        if (cartCountElement) {
          const newCount = cartData.item_count;
          cartCountElement.textContent = newCount;
          const cartBubbleText = document.querySelector('.cart-bubble__text[data-cart-bubble-text]');
          if (cartBubbleText) {
              cartBubbleText.textContent = `${newCount} items in cart`;
          }
          const cartBubbleBackground = document.querySelector('.cart-bubble_background');
          if (cartBubbleBackground) {
            if (newCount > 0) {
              cartBubbleBackground.classList.remove('hidden');
            } else {
              cartBubbleBackground.classList.add('hidden');
            }
          }
        }
      }
    } catch (error) {
      console.error('Error fetching initial cart count:', error);
    }
  }

  // Add this to your global CSS or in the <style> tag of this section
  // @keyframes spin { 0% { transform: rotate(0deg); } 100% { transform: rotate(360deg); } }
</script>

{% schema %}
{
  "name": "sticky-cart",
  "settings": [],
  "presets": [
  {
    "name": "sticky-cart",
    "category": "Custom"
  }
]
}
{% endschema %}
